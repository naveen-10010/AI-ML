# Importing required libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
data = pd.read_csv('MalwareData.csv', sep='|')

# Feature and target selection
features = ['DllCharacteristics', 'Machine', 'Characteristics', 'VersionInformationSize', 
            'ImageBase', 'MajorSubsystemVersion', 'SectionsMaxEntropy', 'Subsystem', 
            'ResourcesMaxEntropy', 'SizeOfOptionalHeader', 'SectionsMeanEntropy', 
            'MajorOperatingSystemVersion', 'ResourcesMinEntropy', 'SectionsMinEntropy']
X = data[features]
y = data['legitimate']

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

# Creating models
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

# Modified Decision Tree model with restricted depth and other parameters to reduce accuracy
dt_model = DecisionTreeClassifier(
    random_state=70,
    max_depth=10,           # Limit depth to reduce complexity and overfitting
    min_samples_split=20,  # Increase the minimum samples required to split a node
    min_samples_leaf=10    # Increase the minimum samples required to be at a leaf node
)

# Training models
rf_model.fit(X_train, y_train)
dt_model.fit(X_train, y_train)

# Predicting with both models
rf_pred = rf_model.predict(X_test)
dt_pred = dt_model.predict(X_test)

# Calculating accuracy
# Importing required libraries
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Assuming dt_pred (Decision Tree predictions) and y_test (true labels) are already defined

# Confusion Matrix for Decision Tree
cm_dt = confusion_matrix(y_test, dt_pred)

# Plotting the confusion matrix
plt.figure()
sns.heatmap(cm_dt, annot=True, fmt='d', cmap='Blues', xticklabels=['Malicious', 'Legitimate'], 
            yticklabels=['Malicious', 'Legitimate'], cbar=False)
plt.title('Decision Tree Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()
